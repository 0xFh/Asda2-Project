using System.Collections.Generic;
using Castle.ActiveRecord;
using WCell.Constants;
using WCell.Constants.Items;
using WCell.Core.Initialization;
using WCell.Core.Network;
using WCell.RealmServer.Content;
using WCell.RealmServer.Entities;
using WCell.RealmServer.Handlers;
using WCell.RealmServer.Items;
using WCell.RealmServer.Logs;
using WCell.RealmServer.Network;
using WCell.Util;
using WCell.Util.Data;
using System.Linq;
using WCell.Util.Variables;
using System.Threading;

namespace WCell.RealmServer.Asda2_Items
{
    public class Asda2CraftingHandler
    {
        [PacketHandler(RealmServerOpCode.LearnRecipe)] //6598
        public static void LearnRecipeRequest(IRealmClient client, RealmPacketIn packet)
        {
            var slot = packet.ReadInt16(); //default : 7Len : 2
            client.ActiveCharacter.Asda2Inventory.LearnRecipe(slot);
        }

        public static void SendRecipeLeadnedResponse(IRealmClient client, bool success, short recipeId, Asda2Item recipeItem)
        {
            using (var packet = new RealmPacketOut(RealmServerOpCode.RecipeLeadned)) //6599
            {
                packet.WriteByte(success ? 1 : 0); //{status}default value : 1 Len : 1
                packet.WriteInt32(client.ActiveCharacter.Asda2Inventory.Weight); //{weight}default value : 2080 Len : 4
                packet.WriteInt32(recipeItem == null ? 0 : recipeItem.ItemId); //{itemId}default value : 31981 Len : 4
                packet.WriteByte(2); //{inv}default value : 2 Len : 1
                packet.WriteInt16(recipeItem == null ? 0 : recipeItem.Slot); //{slot}default value : 8 Len : 2
                packet.WriteInt16(recipeItem == null ? 0 : recipeItem.IsDeleted ? -1 : 0); //{minusOneIfDelete}default value : -1 Len : 2
                packet.WriteInt32(recipeItem == null ? 0 : recipeItem.Amount); //{amount}default value : 0 Len : 4
                packet.WriteByte(0); //value name : stab25 default value : stab25Len : 1
                packet.WriteInt16(recipeItem == null ? 0 : recipeItem.Amount); //{amount0}default value : 0 Len : 2
                packet.WriteSkip(stab28); //value name : stab28 default value : stab28Len : 41
                packet.WriteInt16(recipeId); //{reciepeId}default value : 2 Len : 2
                client.Send(packet, addEnd: true);
            }
        }

        private static readonly byte[] stab28 = new byte[]
            {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

        public static void SendLeanedRecipesResponse(IRealmClient client)
        {
            using (var packet = new RealmPacketOut(RealmServerOpCode.LeanedRecipes))//6597
            {
                packet.WriteInt16(client.ActiveCharacter.LearnedRecipesCount);//{reciepeCount}default value : 6 Len : 2
                packet.WriteInt16(1000);//client.ActiveCharacter.Record.MaxRepipesCount);//{maxRecipeCount}default value : 20 Len : 2
                for (int i = 0; i < 576; i++)
                {
                    packet.WriteByte(client.ActiveCharacter.LearnedRecipes.GetBit(i) ? 1 : 0);
                }
                packet.WriteInt32(0);
                //value name : stab11 default value : stab11Len : 580
                packet.WriteByte(client.ActiveCharacter.Record.CraftingLevel);//{lvl}default value : 1 Len : 1
                packet.WriteInt32(0);//value name : unk4 default value : 0Len : 4
                packet.WriteInt16((short)client.ActiveCharacter.Record.CraftingExp);//{expPrc}default value : 0 Len : 2
                packet.WriteInt16(0);//value name : unk2 default value : 0Len : 2
                client.Send(packet, addEnd: true);
            }
        }
        static readonly byte[] stab11 = new byte[] { 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        //private static int craftTimes = 0;
        private static readonly List<Asda2Item> NullList = new List<Asda2Item>();
        [PacketHandler(RealmServerOpCode.Craft)] //6602
        public static void CraftRequest(IRealmClient client, RealmPacketIn packet)
        {

            var recId = packet.ReadInt16(); //default : 1Len : 2
            List<Asda2Item> materials;
            var item = client.ActiveCharacter.Asda2Inventory.TryCraftItem(recId, out materials);
            if (item != null)
            {
                // SendCraftedResponse(client, true, (byte)item.Template.Quality, item, materials);
                SendCraftedResponse(client, true, 1, item, materials);

            }
            
            else
            {
                SendCraftedResponse(client, false, 0, null, NullList);
            }


        }

        public static void SendCraftedResponse(IRealmClient client, bool sucess, byte craftTimes, Asda2Item craftedItem, List<Asda2Item> craftMaterials)
        {
            using (var packet = new RealmPacketOut(RealmServerOpCode.Crafted)) //6603
            {
                packet.WriteByte(sucess ? 1 : 0); //{status}default value : 1 Len : 1
                packet.WriteInt16(client.ActiveCharacter.Asda2Inventory.Weight); //{weight}default value : 11558 Len : 2
                packet.WriteByte(client.ActiveCharacter.Record.CraftingLevel); //{lvl}default value : 1 Len : 1
                packet.WriteInt32(0); //value name : unk4 default value : 0Len : 4
                packet.WriteInt16((short)client.ActiveCharacter.Record.CraftingExp); //{expPrc}default value : 0 Len : 2
                packet.WriteInt16(craftTimes); //{craftTimes}default value : 1 Len : 2
                Asda2InventoryHandler.WriteItemInfoToPacket(packet, craftedItem, false);
                for (int i = 0; i < craftMaterials.Count; i++)
                {
                    var item = craftMaterials.Count <= i ? null : craftMaterials[i];
                    Asda2InventoryHandler.WriteItemInfoToPacket(packet, item, false);
                }
                //  for (int i = 0; i < 7; i += 1)
                //{
                //  var item = craftMaterials.Count <= i ? null : craftMaterials[i];
                // Asda2InventoryHandler.WriteItemInfoToPacket(packet, item, false);
                //}
                client.Send(packet);
            }
        }

    }

    public class Asda2CraftMgr
    {
        [Initialization(InitializationPass.Tenth, "Craft")]
        public static void Init()
        {
            ContentMgr.Load<Asda2RecipeTemplate>();
        }
        [NotVariable]
        public static Asda2RecipeTemplate[] RecipeTemplates = new Asda2RecipeTemplate[700];
        public static Asda2RecipeTemplate GetRecipeTemplate(int id)
        {
            if (id < 1 || id >= RecipeTemplates.Length)
                return null;
            return RecipeTemplates[id];
        }
    }
    [DataHolder]
    public class Asda2RecipeTemplate : IDataHolder
    {
        [Property]
        public string Name { get; set; }
        [Property]
        public int Id { get; set; }
        [Property]
        public int CraftingLevel { get; set; }
        [Persistent(6)]
        [Property]
        public int[] RequredItemIds { get; set; }
        [Persistent(6)]
        [Property]
        public short[] ReqiredItemAmounts { get; set; }
        [Persistent(7)]
        [Property]
        public int[] ResultItemIds { get; set; }
        [Persistent(7)]
        [Property]
        public short[] ResultItemAmounts { get; set; }

        public byte MaximumPosibleRarity { get; set; }

        public void FinalizeDataHolder()
        {
            if (Id == 0)
                return;
            ArrayUtil.SetValue(Asda2CraftMgr.RecipeTemplates, Id, this);
            MaximumPosibleRarity = (byte)ResultItemIds.Count(i => i != -1);
        }
    }
}