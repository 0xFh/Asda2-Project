//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCell.RealmServerConsole.GetFilesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ServerDistributer")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, byte[]> FilesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, byte[]> Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GetFilesService.IGetFilesService")]
    public interface IGetFilesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetFilesService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IGetFilesService/GetDataUsingDataContractResponse")]
        WCell.RealmServerConsole.GetFilesService.CompositeType GetDataUsingDataContract();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGetFilesService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IGetFilesService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(System.AsyncCallback callback, object asyncState);
        
        WCell.RealmServerConsole.GetFilesService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetFilesService/GetContentData", ReplyAction="http://tempuri.org/IGetFilesService/GetContentDataResponse")]
        WCell.RealmServerConsole.GetFilesService.CompositeType GetContentData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGetFilesService/GetContentData", ReplyAction="http://tempuri.org/IGetFilesService/GetContentDataResponse")]
        System.IAsyncResult BeginGetContentData(System.AsyncCallback callback, object asyncState);
        
        WCell.RealmServerConsole.GetFilesService.CompositeType EndGetContentData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetFilesServiceChannel : WCell.RealmServerConsole.GetFilesService.IGetFilesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCell.RealmServerConsole.GetFilesService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCell.RealmServerConsole.GetFilesService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WCell.RealmServerConsole.GetFilesService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WCell.RealmServerConsole.GetFilesService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilesServiceClient : System.ServiceModel.ClientBase<WCell.RealmServerConsole.GetFilesService.IGetFilesService>, WCell.RealmServerConsole.GetFilesService.IGetFilesService {
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContentDataDelegate;
        
        private EndOperationDelegate onEndGetContentDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetContentDataCompletedDelegate;
        
        public GetFilesServiceClient() {
        }
        
        public GetFilesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetFilesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetFilesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetFilesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<GetContentDataCompletedEventArgs> GetContentDataCompleted;
        
        public WCell.RealmServerConsole.GetFilesService.CompositeType GetDataUsingDataContract() {
            return base.Channel.GetDataUsingDataContract();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataUsingDataContract(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCell.RealmServerConsole.GetFilesService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDataUsingDataContract(callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            WCell.RealmServerConsole.GetFilesService.CompositeType retVal = this.EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync() {
            this.GetDataUsingDataContractAsync(null);
        }
        
        public void GetDataUsingDataContractAsync(object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, null, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        public WCell.RealmServerConsole.GetFilesService.CompositeType GetContentData() {
            return base.Channel.GetContentData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContentData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContentData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WCell.RealmServerConsole.GetFilesService.CompositeType EndGetContentData(System.IAsyncResult result) {
            return base.Channel.EndGetContentData(result);
        }
        
        private System.IAsyncResult OnBeginGetContentData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetContentData(callback, asyncState);
        }
        
        private object[] OnEndGetContentData(System.IAsyncResult result) {
            WCell.RealmServerConsole.GetFilesService.CompositeType retVal = this.EndGetContentData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContentDataCompleted(object state) {
            if ((this.GetContentDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContentDataCompleted(this, new GetContentDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContentDataAsync() {
            this.GetContentDataAsync(null);
        }
        
        public void GetContentDataAsync(object userState) {
            if ((this.onBeginGetContentDataDelegate == null)) {
                this.onBeginGetContentDataDelegate = new BeginOperationDelegate(this.OnBeginGetContentData);
            }
            if ((this.onEndGetContentDataDelegate == null)) {
                this.onEndGetContentDataDelegate = new EndOperationDelegate(this.OnEndGetContentData);
            }
            if ((this.onGetContentDataCompletedDelegate == null)) {
                this.onGetContentDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContentDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetContentDataDelegate, null, this.onEndGetContentDataDelegate, this.onGetContentDataCompletedDelegate, userState);
        }
    }
}
