<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckingForDatabase" xml:space="preserve">
    <value>Checking for {0} database</value>
  </data>
  <data name="DatabaseConnectionFailure" xml:space="preserve">
    <value>Couldn't connect to database server</value>
  </data>
  <data name="DatabaseDoesNotExist" xml:space="preserve">
    <value>{0} database does not exist, creating</value>
  </data>
  <data name="InitializingDatabase" xml:space="preserve">
    <value>Initializing database</value>
  </data>
  <data name="InitStepsLoaded" xml:space="preserve">
    <value>Found and loaded {0} {1}!</value>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>The key '{0}' was not found in the configuration file!</value>
  </data>
  <data name="MissingSqlScript" xml:space="preserve">
    <value>Missing database schema file, ensure you have a {0} file in your server folder</value>
  </data>
  <data name="NullStream" xml:space="preserve">
    <value>GetResourceStream returned a null stream (file not found)</value>
  </data>
  <data name="RunningSqlScript" xml:space="preserve">
    <value>Running {0}</value>
  </data>
  <data name="InitComplete" xml:space="preserve">
    <value>Initialization complete! {0} successful steps, {1} non-fatal failures.</value>
  </data>
  <data name="InitPass" xml:space="preserve">
    <value>Initialization Pass #{0}</value>
  </data>
  <data name="InitStepSucceeded" xml:space="preserve">
    <value>Step:  '{0}' ({1})</value>
  </data>
  <data name="InitStepFailed" xml:space="preserve">
    <value>Step '{0}' ({1}) failed to finish{2}</value>
  </data>
  <data name="PerformingNextInitStep" xml:space="preserve">
    <value>Performing next step: '{0}'</value>
  </data>
  <data name="InitStepWasRequired" xml:space="preserve">
    <value>Step '{0}' ({1}) was required to proceed; stopping!</value>
  </data>
  <data name="ManagerInternalRestartFailed" xml:space="preserve">
    <value>Manager: {0}, internal restart failed.</value>
  </data>
  <data name="ManagerInternalStartFailed" xml:space="preserve">
    <value>Manager: {0}, internal start failed.</value>
  </data>
  <data name="ManagerInternalStopFailed" xml:space="preserve">
    <value>Manager: {0}, internal stop failed.</value>
  </data>
  <data name="ManagerRestarted" xml:space="preserve">
    <value>Manager: {0}, has succesfully restarted.</value>
  </data>
  <data name="ManagerRestartFailed" xml:space="preserve">
    <value>Manager: {0}, restart failed.</value>
  </data>
  <data name="ManagerRestarting" xml:space="preserve">
    <value>Restarting Manager: {0}</value>
  </data>
  <data name="ManagerStarted" xml:space="preserve">
    <value>Manager: {0}, has succesfully started.</value>
  </data>
  <data name="ManagerStartFailed" xml:space="preserve">
    <value>Manager: {0}, start failed.</value>
  </data>
  <data name="ManagerStarting" xml:space="preserve">
    <value>Starting Manager: {0}</value>
  </data>
  <data name="ManagerStopFailed" xml:space="preserve">
    <value>Manager: {0}, stop failed.</value>
  </data>
  <data name="ManagerStopped" xml:space="preserve">
    <value>Manager: {0}, has succesfully stopped.</value>
  </data>
  <data name="ManagerStopping" xml:space="preserve">
    <value>Stopping Manager: {0}</value>
  </data>
  <data name="ManagerThrownError" xml:space="preserve">
    <value>Manager: {0}, has thrown an error: {1}</value>
  </data>
  <data name="DBCreateFailed" xml:space="preserve">
    <value>Failed to create the neccessary database!</value>
  </data>
  <data name="DBScriptNotFound" xml:space="preserve">
    <value>Couldn't load the DB script file!</value>
  </data>
  <data name="IOPoolSlowdown" xml:space="preserve">
    <value>IO task pool experiencing slowdowns.</value>
  </data>
  <data name="NetworkPoolSlowdown" xml:space="preserve">
    <value>Network task pool experiencing slowdowns.</value>
  </data>
  <data name="HandlerAlreadyRegistered" xml:space="preserve">
    <value>The PacketHandler for Packet {0} '{1}' has been overridden with '{2}'!</value>
  </data>
  <data name="InvalidHandlerMethodSignature" xml:space="preserve">
    <value>Cannot create packet handler delegate from method '{0}': invalid method signature!</value>
  </data>
  <data name="UnhandledPacket" xml:space="preserve">
    <value>Unhandled packet {0} ({1}), Size: {2} bytes</value>
  </data>
  <data name="ProcessExited" xml:space="preserve">
    <value>Server has been shutdown.</value>
  </data>
  <data name="FatalUnhandledException" xml:space="preserve">
    <value>A fatal, unhandled exception was encountered!</value>
  </data>
  <data name="ServerStarting" xml:space="preserve">
    <value>Starting server...</value>
  </data>
  <data name="ServerStopping" xml:space="preserve">
    <value>Stopping server...</value>
  </data>
  <data name="InitFailed" xml:space="preserve">
    <value>Failed to fully process all required initialization steps!</value>
  </data>
  <data name="ClientInformationFourCCs">
    <value xml:space="preserve">ProtocolVersion: {0} ClientType: {1} Version: {2} Architecture: {3} OS: {4} Locale: {5} TimeZone: {6} IP: {7}</value>
  </data>
  <data name="Auth Logon with invalid length">
    <value xml:space="preserve">Client attempting login sent AUTH_LOGON_CHALLENGE remaining length as {0}, however {1} bytes are remaining</value>
  </data>
</root>