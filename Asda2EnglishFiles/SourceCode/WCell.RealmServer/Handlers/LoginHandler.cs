using NLog;
using System;
using WCell.Constants;
using WCell.Constants.Login;
using WCell.Core;
using WCell.Core.Network;
using WCell.RealmServer.Database;
using WCell.RealmServer.Entities;
using WCell.RealmServer.Global;
using WCell.RealmServer.Network;
using WCell.RealmServer.Res;
using WCell.Util.NLog;
using WCell.Util.Threading;

namespace WCell.RealmServer.Handlers
{
    public static class LoginHandler
    {
        private static readonly Logger log = LogManager.GetCurrentClassLogger();

        /// <summary>Triggered after an Account logs into the Realm-server</summary>
        public static event Action<RealmAccount> AccountLogin;

        /// <summary>Triggered before a client disconnects</summary>
        public static event Func<IRealmClient, CharacterRecord, CharacterRecord> BeforeLogin;

        /// <summary>Triggered before a client disconnects</summary>
        public static event Action<IRealmClient> ClientDisconnected;

        /// <summary>
        /// Send packet generated by the server to initialize authentification
        /// </summary>
        /// <param name="client">the client to send to</param>
        public static void SendAuthChallenge(IRealmClient client)
        {
            using (RealmPacketOut packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUTH_CHALLENGE))
            {
                packet.Write(1);
                packet.Write(ServerApp<WCell.RealmServer.RealmServer>.Instance.AuthSeed);
                packet.WriteUInt(4082343331U);
                packet.WriteUInt(1854228409);
                packet.WriteUInt(2590679800U);
                packet.WriteUInt(2767286516U);
                packet.WriteUInt(4082343331U);
                packet.WriteUInt(1854228409);
                packet.WriteUInt(2590679800U);
                packet.WriteUInt(2767286516U);
                client.Send(packet, false);
            }
        }

        /// <summary>Sends an auth session error response to the client.</summary>
        /// <param name="client">the client to send to</param>
        /// <param name="error">the error code</param>
        public static void SendAuthSessionErrorReply(IPacketReceiver client, LoginErrorCode error)
        {
            using (RealmPacketOut packet = new RealmPacketOut((PacketId) RealmServerOpCode.SMSG_AUTH_RESPONSE, 1))
            {
                packet.WriteByte((byte) error);
                client.Send(packet, false);
            }
        }

        /// <summary>Sends an auth session success response to the client.</summary>
        /// <param name="client">the client to send to</param>
        public static void InviteToRealm(IRealmClient client)
        {
            Action<RealmAccount> accountLogin = LoginHandler.AccountLogin;
            if (accountLogin != null)
                accountLogin(client.Account);
            LoginHandler.SendAuthSuccessful(client);
        }

        public static void NotifyLogout(IRealmClient client)
        {
            Action<IRealmClient> clientDisconnected = LoginHandler.ClientDisconnected;
            if (clientDisconnected == null)
                return;
            clientDisconnected(client);
        }

        public static void SendAuthSuccessful(IRealmClient client)
        {
            using (RealmPacketOut packet = new RealmPacketOut((PacketId) RealmServerOpCode.SMSG_AUTH_RESPONSE, 11))
            {
                packet.WriteByte((byte) 12);
                packet.Write(0);
                packet.Write((byte) 2);
                packet.Write(0);
                packet.Write((byte) client.Account.ClientId);
                client.Send(packet, false);
            }

            ClientAddonHandler.SendAddOnInfoPacket(client);
            ServerApp<WCell.RealmServer.RealmServer>.Instance.OnClientAccepted((object) null, (EventArgs) null);
        }

        /// <summary>Sends the number of currently queued clients.</summary>
        /// <param name="client">the client to send to</param>
        public static void SendAuthQueueStatus(IRealmClient client)
        {
            using (RealmPacketOut packet = new RealmPacketOut(RealmServerOpCode.SMSG_AUTH_RESPONSE))
            {
                packet.WriteByte((byte) 27);
                packet.Write(AuthQueue.QueuedClients + 1);
                client.Send(packet, false);
            }
        }

        /// <summary>Handles an incoming player login request.</summary>
        /// <param name="client">the Session the incoming packet belongs to</param>
        /// <param name="packet">the full packet</param>
        public static void PlayerLoginRequest(IRealmClient client, RealmPacketIn packet)
        {
            if (client.Account == null || client.ActiveCharacter != null)
                return;
            uint charLowId = packet.ReadEntityId().Low;
            try
            {
                Character chr = World.GetCharacter(charLowId);
                if (chr != null)
                {
                    if (!chr.IsLoggingOut)
                    {
                        LoginHandler.log.Error(WCell_RealmServer.CharacterAlreadyConnected, (object) charLowId,
                            (object) client.Account.Name);
                        LoginHandler.SendCharacterLoginFail((IPacketReceiver) client,
                            LoginErrorCode.CHAR_LOGIN_DUPLICATE_CHARACTER);
                    }
                    else
                        chr.Map.AddMessage((IMessage) new Message((Action) (() =>
                        {
                            if (!chr.IsInContext)
                                ServerApp<WCell.RealmServer.RealmServer>.IOQueue.AddMessage(
                                    (IMessage) new Message((Action) (() =>
                                        LoginHandler.LoginCharacter(client, charLowId))));
                            else
                                chr.ReconnectCharacter(client);
                        })));
                }
                else
                    LoginHandler.LoginCharacter(client, charLowId);
            }
            catch (Exception ex)
            {
                LoginHandler.log.Error((object) ex);
                LoginHandler.SendCharacterLoginFail((IPacketReceiver) client, LoginErrorCode.CHAR_LOGIN_FAILED);
            }
        }

        /// <summary>
        /// Checks whether the client is allowed to login and -if so- logs it in
        /// </summary>
        /// <remarks>Executed in IO-Context.</remarks>
        /// <param name="client"></param>
        /// <param name="charLowId"></param>
        private static void LoginCharacter(IRealmClient client, uint charLowId)
        {
            RealmAccount account = client.Account;
            if (account == null)
                return;
            CharacterRecord record = client.Account.GetCharacterRecord(charLowId);
            if (record == null)
            {
                LoginHandler.log.Error(string.Format(WCell_RealmServer.CharacterNotFound, (object) charLowId,
                    (object) account.Name));
                LoginHandler.SendCharacterLoginFail((IPacketReceiver) client, LoginErrorCode.CHAR_LOGIN_NO_CHARACTER);
            }
            else if (record.CharacterFlags.HasAnyFlag(CharEnumFlags.NeedsRename | CharEnumFlags.LockedForBilling))
            {
                LoginHandler.SendCharacterLoginFail((IPacketReceiver) client, LoginErrorCode.AUTH_BILLING_EXPIRED);
            }
            else
            {
                if (client.ActiveCharacter != null)
                    return;
                Character character = (Character) null;
                try
                {
                    Func<IRealmClient, CharacterRecord, CharacterRecord> beforeLogin = LoginHandler.BeforeLogin;
                    if (beforeLogin != null)
                    {
                        record = beforeLogin(client, record);
                        if (record == null)
                            throw new ArgumentNullException("record", "BeforeLogin returned null");
                    }

                    character = record.CreateCharacter();
                    character.Create(account, record, client);
                    character.LoadAndLogin();
                    string str = string.Format("Welcome to " + WCell.RealmServer.RealmServer.FormattedTitle);
                    MiscHandler.SendMotd((IPacketReceiver) client, str);
                }
                catch (Exception ex)
                {
                    LogUtil.ErrorException(ex, "Failed to load Character from Record: " + (object) record,
                        new object[0]);
                    if (character == null)
                        return;
                    character.Dispose();
                    client.Disconnect(false);
                }
            }
        }

        /// <summary>
        /// Sends a "character login failed" error message to the client.
        /// </summary>
        /// <param name="client">the client to send to</param>
        /// <param name="error">the actual login error</param>
        public static void SendCharacterLoginFail(IPacketReceiver client, LoginErrorCode error)
        {
            using (RealmPacketOut packet =
                new RealmPacketOut((PacketId) RealmServerOpCode.SMSG_CHARACTER_LOGIN_FAILED, 1))
            {
                packet.WriteByte((byte) error);
                client.Send(packet, false);
            }
        }
    }
}